# 9.1 文件对象
文件对象不仅可以用来访问普通的磁盘文件，也可以访问任何其他类型抽象层面上的“文件”。一旦设置了合适的“钩子”，你就可以访问具有文件类型接口的其他对象，就好像访问的是普通文件一样。
# 9.2 文件内奸函数（open() 和 file() ）
作为打开文件之门的“钥匙”，内建函数open()[以及file()]提供了初始化输入/输出（I/O）操作的接口。
open()内建函数成功打开文件后会返回一个文件对象，否则会引发一个错误
file_object = open(file_name,access_mode='r',buffering=-1)
file_name:是包含要打开的文件名字的字符串，他可以是相对路径，或者绝对路径。
access_mode:是打开的模式，'r'：读取  'w'：写入  'a'：追加  'U'：代表通用换行符支持
    使用'U' 'r'：模式打开的文件必须是已经存在的
    使用'w'：模式打开的文件若存在则首先清空，然后（重新）创建
    使用'a'：模式打开的文件是为追加数据做准备的，所有写入的数据都将追加到文件的末尾，如果文件不存在，那么创建一个
    默认是'r'模式打开
buffering:用于指示访问文件所采用的缓冲方式。0 表示不缓冲，1 表示只缓冲一行数据，任何其他大于1的值代表使用给定的值作为缓冲区大小
    r ： 以读方式打开
    rU 或 U ：以读方式打开，同时提供通用换行符支持
    w ： 以写方式打开必要时清空
    a ： 以追加模式打开，必要时重新创建
    r+ ： 以读写模式打开
    w+ ： 以读写模式打开
    a+ ： 以读写模式打开
    rb ： 以二进制读模式打开
    wb ： 以二进制写模式打开
    ab ： 以二进制追加模式打开
    rb+ ： 以二进制读写模式打开
    wb+ ： 以二进制读写模式打开
    ab+ ： 以二进制读写模式打开
    | 工厂函数 file()
        file() 和 open() 完全一样
    | 通用换行符支持（UNS)
        不同平台用来表示行结束的符号是不同的，
# 9.3 文件内建方法
    | 输入：
        read()：方法用来直接读取字节到字符串中，最多读取给定数目个字节，如果没有给定size参数（默认值为-1）或者size为负，文件将直接被读取到末尾
        readline()：方法读取打开文件的一行，同样可提供参数，如果超过参数那么超过size个字节之后会返回不完整的行。
        readlines()：方法并不想其他两个输入方法一样返回一个字符串，他会读取所有剩余的行，然后把他们作为一个字符串列表返回。他的可选参数sizhine代表返回的最大字节大小
    | 输出：
        write()：内建方法的功能与read()和readline()想法。
        writelines()：他接受一个字符串列表作为参数，将他们写入文件。行结束符并不会被自动加入，所以如果需要的话，需要在调用writelines()钱给每行结尾加上行结束符
    | 文件内移动
        seek()：可以在文件中移动文件指针到不同的位置。offset字节代表相对于某个位置偏移量，默认为0，代表从文件开头算起；1 代表从当前位置算起，2 代表从文件末尾算起
        tell()：是对seek()方法的补充；他告诉你当前文件指针在文件中的位置
    | 文件迭代
        for eachLine in f:
    | 其他
        close()：通过关闭文件来结束对他的访问
    | 文件方法杂项
# 9.4 文件内建属性
    | file.closed
    | file.encoding ： 文件所使用的编码
    | file.mode 文件打开时使用的访问模式
    | file.name ： 文件名
    | file.newlines ： 为读取到行分割符时为None
# 9.5 标准文件
# 9.6 命令行参数
# 9.7 文件系统
    os模块实际上只是真正加载的模块的前端，正真的那个“模块”明显要依赖与具体的操作系统
