# 4.1 Python对象

身份：内存地址
类型：type()查看
值：数据

# 4.2 标准类型

数字
Integer
Boolean
Long Integer
Floating point real number
Complex number
String
List
Tuple
Dictionary


# 4.3 其他内建类型

类型
Null对象（None）
文件
集合/固定集合
函数/方法
模块
类

- 类型对象和type类型对象
- None--Python的 Null 对象
    bool(None) = False
    以下bool都为False：
        None
        False
        所有值为0的数
        0
        0.0
        0L
        0.0+0.0j
        ""(空字符串)
        []
        {}
        ()


# 4.4 内部类型

代码
帧
跟踪记录
切片
省略
Xrange

- 代码对象
    代码对象是编译多的Python源代码片段，可用compile()来获得
    其本身不含有任何执行环境信息，在被执行的时候获得上下文。
    代码对象是函数的一个属性，同时还有其他属性（函数名，文档字符串，默认参数，全局命名空间等）
- 帧对象
    包含Python解释器在运行时所需要知道的所有信息
- 跟踪记录对象
    发生异常时，就会创建一个包含针对异常信息的栈跟踪信息的跟踪记录
- 切片对象
    语法为：sequence[起始索引:结束索引:步进值]
    foolist = [123,'ew','323',324.32,'qwer']
    foolist[::-1] ---> ['qwer',324.32,'323','ew',123]
- 省略对象
    用于扩卓切片语法中 其 Bool 始终为 True
- XRange对象
    调用内建函数 xrange() 可创建，与 range() 相似，同样是用于需要节省内存使用或者 range() 无法完成的超大数据集合


# 4.5 标准类型操作符

- 对象值的比较
    用来判断 同类型 是否相等
    所有的内建函数都支持比较运算  返回 Boolean
    <
    >
    <=
    >=
    ==
    !=
- 对象身份比较（内存地址）
    对象可通过引用被赋值到另一个变量
        fool1 与 fool2 指向相同的对象
            fool1 = fool2 = 4.3
        fool1 与 fool2 指向相同的对象
            fool1 = 4.3
            fool2 = fool1
        fool1 与 fool2 指向不同的对象
            fool1 = 4.3
            fool2 = 3.0 + 1.3
    Python 提供了 is 函数来测试是否指向同一个对象
        fool1 is fool2 （实际就是 id(fool1) == id(fool2)）
    ## 注意，实例中我们使用了浮点型，因为整型和字符串对象是不可变对象，Python可以很高效的缓存他们，这样子会造成本该是指向不同对象的却指向了相同对象 fool1 = 4 , fool2 = 3 + 1,他们的 is 比较结果为 Ture，但是这种操作结果也是有一定范围的，千万不要在程序中使用这个特性
- 布尔类型
    逻辑操作符（优先级顺序排列）not -- and -- or
- 标准类型内建函数
    cmp(obj1,obj2):比较 obj1 和 obj2 ，根据结果返回 i
        i < 0 if obj1 < obj2
        i > 0 if obj1 > obj2
        i == 0 if obj1 == obj2
    repr(obj) 或 'obj' : 返回一个对象的字符串表示
    str(obj) : 返回对象适合可读性好的字符串表示
    type(obj) : 得到一个对象的类型，并返回相应的type对象

    - type()
        其可以返回对象的类型，但是有些不容易现实的对象来说，Python会一个相对标准的格式表示<object_someting_or_another>通常会提供对象类别、对象id或位置、或者其他合适的信息
    - cmp()
        用于比较两个对象，返回负整型，正整型，以及0
    - str() 和 repr()(以及 ‘’ 操作符)
        以字符串的方式获取对象的内容、类型、数值属性等信息
        str() 函数得到的字符串可读性好
        repr() 函数得到的字符串通常可以用来重新获取该对象 obj == eval(repr(obj)) 这个等式是成立的
    - type() 和 isinstance()
    - Python类型操作符合内建函数总结
- 类型工厂函数
    看上去是像函数，实质上是一个类，当你调用时，实际上是生成了该类型的一个实例。
    int() , long() , float() , complex()
    str() , unicode() , basestring()
    list() , tuple()
    type()
    dict()
    bool()
    set() , frozenset()
    object()
    classmethod()
    staticmethod()
    super()
    property()
    file()
    以前叫做内建函数，现在教工厂函数

# 4.8 标准类型的分类
- 存储模型
    一种定义方式:看看这种类型的对象能包含多少个对象。
        包含单个字面对象的类型称之为原子或者标量存储
        可容纳多个对象的类型称之为容器存储（可以容纳不同的类型的对象）
        字符串是一种自我包含的文字类型，所以是原子
        | 标量/原子类型  :  数值，字符串
        | 容器类型  :  列表，元组，字典
- 更新模型
    另一种定义方式:对象创建成功之后，他的值是否可以更新
        | 可变类型  : 列表，字典
        | 不可变类型 : 数字，字符串，元组
- 访问模型
    还有一种定义:根据访问我们存储的数据的方式分类
        有三种访问方式:
        | 直接存取 : 非容器类型直接访问  === （数字）
        | 顺序 : 容器内的元素按照从0开始的索引顺序访问（字符串） === （字符串，列表，元组）
        | 映射 : 元素无序，哈希键值对的集合 === （字典）
    为什么要进行数据分类
        | Python提供了高级的数据结构，我们需要将之与原始的类型区分
        | 有助于了解某种类型应该具有什么行为

# 4.9 不支持的类型
- char 或 byte
- 指针(id()是最接近指针的东西，没啥用，Python中一切皆指针)
- int VS short VS long
- float VS double(在处理金钱的时候使用 Decimal:十进制任意精度,需要导入decimal类)
